{"version":3,"sources":["CaseMap.js","DeathMap.js","PerCapitaMap.js","App.js","index.js"],"names":["CaseMap","setTooltipContent","data","caseByCountry","coordinateByCountry","map","row","latest","Object","keys","length","sizeScale","scaleLinear","domain","range","notShowCountries","data-tip","projectionConfig","rotate","geography","geographies","geo","key","rsmKey","fill","stroke","strokeWidth","outline","index","coordinates","className","r","onMouseEnter","onMouseLeave","indexOf","toLocaleString","DeathMap","deathByCountry","colorScale","PerCapitaMap","mapData","require","casePerCapita","value","d","objects","ne_110m_admin_0_countries","geometries","filter","s","properties","NAME","population","POP_EST","entries","style","default","hover","toFixed","App","useState","content","setContent","view","setView","caseData","setCaseData","deathData","setDeathData","todayDate","Date","split","splice","join","useEffect","csv","then","autoFocus","onClick","borderColor","backgroundColor","textColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa73e169.chunk.js","sourcesContent":["import React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"/world-110m.json\";\n\nconst CaseMap = ({setTooltipContent, data}) => {\n\n  var caseByCountry = {};\n  var coordinateByCountry = {};\n\n  data.map(row => {\n    const latest = Object.keys(row)[Object.keys(row).length-1];\n    if (row['Country/Region'] === 'US') {\n      row['Country/Region'] = 'United States of America';\n    }\n    if (row['Country/Region'] === 'Taiwan*') {\n      row['Country/Region'] = 'Taiwan';\n    }\n    caseByCountry[row['Country/Region']] =\n      row['Country/Region'] in caseByCountry ?\n        caseByCountry[row['Country/Region']] + (+row[latest]) :\n        +row[latest]\n    if (row['Country/Region'] === 'United Kingdom') {\n      coordinateByCountry[row['Country/Region']] = [3.4360, 55.3781]\n    }\n    else{\n      coordinateByCountry[row['Country/Region']] = [+row[\"Long\"], +row[\"Lat\"]]\n    }\n  });\n\n  const sizeScale = scaleLinear()\n  .domain([10, 250, 5000, 100000])\n  .range([1, 4, 10, 18]);\n\n  const notShowCountries = [\"Denmark\", \"Estonia\", \"Austria\", \"Ireland\", \"Norway\", \"Finland\", \"Portugal\", \"Lithuania\", \"Greece\", \"Germany\", \"Luxembourg\", \"Poland\", \"Belarus\", \"Romania\", \"Belgium\", \"Switzerland\", \"Czechia\", \"Bosnia and Herzegovina\", \"Slovakia\", \"Serbia\", \"Hungary\", \"Slovenia\", \"Croatia\", \"Moldova\", \"Armenia\", \"Egypt\", \"Saudi Arabia\", \"Lebanon\", \"Bahrain\", \"Qatar\", \"United Arab Emirates\", \"Iraq\", \"Singapore\", \"Indonesia\", \"Japan\", \"Argentina\"]\n\n  return (\n    <ComposableMap\n      data-tip=\"\"\n      projectionConfig={{\n        rotate: [-20, 0, 0]\n      }}\n    >\n        {data.length > 0 && (\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill = '#ededed'\n                    stroke = \"white\"\n                    strokeWidth = \"0.5\"\n                    outline = \"none\"\n                  />\n                );\n              })\n            }\n          </Geographies>\n        )}\n        {Object.keys(coordinateByCountry).map((key, index) => (\n          <Marker key={index}\n                  coordinates={[coordinateByCountry[key][0], coordinateByCountry[key][1]]}>\n              <circle className=\"caseCircle\"\n                r={sizeScale(caseByCountry[key])}\n                onMouseEnter={() => {\n                  setTooltipContent(`${key} - ${caseByCountry[key]}`);\n                }}\n                onMouseLeave={() => {\n                  setTooltipContent(\"\");\n                }}\n                 />\n          </Marker>\n      ))}\n        {Object.keys(coordinateByCountry).map((key, index) => (\n          <Marker key={index}\n                  coordinates={[coordinateByCountry[key][0], coordinateByCountry[key][1]]}>\n              <text className=\"country-text\">\n                {caseByCountry[key] > 500 && notShowCountries.indexOf(key) < 0 ? key : null}\n              </text>\n          </Marker>\n      ))}\n        {Object.keys(coordinateByCountry).map((key, index) => (\n          <Marker key={index}\n                  coordinates={[coordinateByCountry[key][0], coordinateByCountry[key][1]-3]}>\n              <text className=\"num-text\">\n                {caseByCountry[key] > 500 && notShowCountries.indexOf(key) < 0 ? caseByCountry[key].toLocaleString() : null}\n              </text>\n          </Marker>\n      ))}\n    </ComposableMap>\n  );\n};\n\nexport default CaseMap;\n","import React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"/world-110m.json\";\n\nconst sizeScale = scaleLinear()\n  .domain([10, 250, 5000, 100000])\n  .range([1, 4, 10, 18]);\n\nconst DeathMap = ({setTooltipContent, data}) => {\n\n  var deathByCountry = {};\n  var coordinateByCountry = {};\n\ndata.map(row => {\n  const latest = Object.keys(row)[Object.keys(row).length-1];\n  if (row['Country/Region'] === 'US') {\n    row['Country/Region'] = 'United States of America';\n  }\n  if (row['Country/Region'] === 'Taiwan*') {\n    row['Country/Region'] = 'Taiwan';\n  }\n  deathByCountry[row['Country/Region']] =\n    row['Country/Region'] in deathByCountry ?\n      deathByCountry[row['Country/Region']] + (+row[latest]) :\n      +row[latest]\n  if (row['Country/Region'] === 'United Kingdom') {\n    coordinateByCountry[row['Country/Region']] = [3.4360, 55.3781]\n  }\n  else{\n    coordinateByCountry[row['Country/Region']] = [+row[\"Long\"], +row[\"Lat\"]]\n  }\n});\n\n  const notShowCountries = [\"Denmark\", \"Estonia\", \"Ireland\", \"Norway\", \"Finland\", \"Portugal\", \"Lithuania\", \"Greece\", \"Germany\", \"Luxembourg\", \"Poland\", \"Belarus\", \"Romania\", \"Belgium\", \"Switzerland\", \"Czechia\", \"Bosnia and Herzegovina\", \"Slovakia\", \"Serbia\", \"Hungary\", \"Slovenia\", \"Croatia\", \"Moldova\", \"Egypt\", \"Saudi Arabia\", \"Lebanon\", \"Bahrain\", \"Qatar\", \"United Arab Emirates\", \"Singapore\", \"Japan\", \"Argentina\"]\n\n  return (\n    <div>\n      <ComposableMap\n        data-tip=\"\"\n        projectionConfig={{\n          rotate: [-20, 0, 0]\n        }}\n      >\n          {data.length > 0 && (\n            <Geographies geography={geoUrl}>\n              {({ geographies }) =>\n                geographies.map(geo => {\n                  return (\n                    <Geography\n                      key={geo.rsmKey}\n                      geography={geo}\n                      fill = '#ededed'\n                      stroke = \"white\"\n                      strokeWidth = \"0.5\"\n                    />\n                  );\n                })\n              }\n            </Geographies>\n          )}\n          {Object.keys(coordinateByCountry).map((key, index) => (\n            <Marker key={index}\n                    coordinates={[coordinateByCountry[key][0], coordinateByCountry[key][1]]}>\n                <circle\n                  className=\"deathCircle\"\n                  r={sizeScale(deathByCountry[key])}\n                  onMouseEnter={() => {\n                    setTooltipContent(`${key} - ${deathByCountry[key]}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                   />\n            </Marker>\n        ))}\n          {Object.keys(coordinateByCountry).map((key, index) => (\n            <Marker key={index}\n                    coordinates={[coordinateByCountry[key][0], coordinateByCountry[key][1]]}>\n                <text className=\"country-text\">\n                  {deathByCountry[key] > 100 && notShowCountries.indexOf(key)  < 0 ? key : null}\n                </text>\n            </Marker>\n        ))}\n          {Object.keys(coordinateByCountry).map((key, index) => (\n            <Marker key={index}\n                    coordinates={[coordinateByCountry[key][0], coordinateByCountry[key][1]-3]}>\n                <text className=\"num-text\">\n                  {deathByCountry[key] > 100 && notShowCountries.indexOf(key)  < 0 ? deathByCountry[key].toLocaleString() : null}\n                </text>\n            </Marker>\n        ))}\n      </ComposableMap>\n      </div>\n  );\n};\n\nexport default DeathMap;\n","import React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"/world-110m.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0, 10, 100, 200])\n  .range([\"#fff2e6\", \"#ffcc99\", \"#ff8000\", \"#ff6600\"]);\n\nconst PerCapitaMap = ({setTooltipContent, data}) => {\n\n  const mapData = require('./world-110m.json');\n\n  var caseByCountry = {};\n  var coordinateByCountry = {};\n  var casePerCapita = {};\n\n  data.map(row => {\n    const latest = Object.keys(row)[Object.keys(row).length-1];\n    if (row['Country/Region'] === 'US') {\n      row['Country/Region'] = 'United States of America';\n    }\n    if (row['Country/Region'] === 'Taiwan*') {\n      row['Country/Region'] = 'Taiwan';\n    }\n    caseByCountry[row['Country/Region']] =\n      row['Country/Region'] in caseByCountry ?\n        caseByCountry[row['Country/Region']] + (+row[latest]) :\n        +row[latest]\n    if (row['Country/Region'] === 'United Kingdom') {\n      coordinateByCountry[row['Country/Region']] = [3.4360, 55.3781]\n    }\n    else{\n      coordinateByCountry[row['Country/Region']] = [+row[\"Long\"], +row[\"Lat\"]]\n    }\n  });\n\n  for (const [key, value] of Object.entries(caseByCountry)) {\n    const d = mapData.objects.ne_110m_admin_0_countries.geometries.filter(s => s.properties.NAME === key);\n    const population = d[0] ? d[0].properties.POP_EST :  null\n    casePerCapita[key] = population ? value / population * 100000 : null\n  }\n\n  const notShowCountries = [\"Denmark\", \"Estonia\", \"Austria\", \"Ireland\", \"Norway\", \"Finland\", \"Portugal\", \"Lithuania\", \"Luxembourg\", \"Poland\", \"Belarus\", \"Romania\", \"Belgium\", \"Switzerland\", \"Czechia\", \"Bosnia and Herzegovina\", \"Slovakia\", \"Serbia\", \"Hungary\", \"Slovenia\", \"Croatia\", \"Moldova\", \"Egypt\", \"Saudi Arabia\", \"Lebanon\", \"Bahrain\", \"Qatar\", \"United Arab Emirates\", \"Iraq\", \"Singapore\", \"Indonesia\", \"Japan\", \"Argentina\", \"Albania\", \"Bulgaria\", \"Montenegro\", \"Kosovo\", \"Georgia\", \"Azerbaijan\", \"Kuwait\", \"Syria\", \"Kyrgyzstan\", \"Bhutan\", \"Jordan\", \"Vietnam\", \"Guinea-Bissau\", \"Guinea\",\"Togo\", \"Ghana\", \"Gambia\", \"Benin\", \"Botswana\", \"Mozambique\", \"Uganda\", \"Burundi\", \"Nicaragua\", \"El Salvador\", \"Guyana\", \"Belieze\", \"Netherlands\", \"Costa Rica\", \"Guatemala\", \"Haiti\", \"Sierra Leone\"]\n\n  return (\n    <ComposableMap\n      data-tip=\"\"\n      projectionConfig={{\n        rotate: [-20, 0, 0]\n      }}\n    >\n        {data.length > 0 && (\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                casePerCapita[geo.properties.NAME] = caseByCountry[geo.properties.NAME] / geo.properties.POP_EST * 100000;\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill = {casePerCapita[geo.properties.NAME] ? colorScale(casePerCapita[geo.properties.NAME]): \"#F5F4F6\"}\n                    strokeWidth = \"0.5\"\n                    style={{\n                      default :{\n                        stroke: \"white\"\n                      },\n                      hover: {\n                        stroke: \"black\"\n                      }\n                    }}\n                    onMouseEnter={() => {\n                      setTooltipContent(`${geo.properties.NAME} - ${casePerCapita[geo.properties.NAME].toFixed(1)}`);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n        )}\n        {Object.keys(coordinateByCountry).map((key, index) => (\n          <Marker key={index}\n                  coordinates={[coordinateByCountry[key][0], coordinateByCountry[key][1]]}>\n              <text className=\"country-text\">\n                { casePerCapita[key] > 0 && notShowCountries.indexOf(key) < 0 ? key : null}\n              </text>\n          </Marker>\n      ))}\n    </ComposableMap>\n  );\n};\n\nexport default PerCapitaMap;\n","import React, { useEffect, useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport { csv } from \"d3-fetch\";\n\nimport \"./styles.css\";\n\nimport CaseMap from \"./CaseMap\";\nimport DeathMap from \"./DeathMap\";\nimport PerCapitaMap from \"./PerCapitaMap\";\n\nfunction App() {\n\tconst [content, setContent] = useState(\"\");\n\tconst [view, setView] = useState(\"case\");\n\tconst [caseData, setCaseData] = useState([]);\n\tconst [deathData, setDeathData] = useState([]);\n\n\tvar todayDate = Date().split(' ').splice(1,3).join(' ');\n\n\tuseEffect(() => {\n\t    csv(`https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv`).then(caseData => {\n\t      setCaseData(caseData);\n\t    });\n\t    csv(`https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv`).then(deathData => {\n\t      setDeathData(deathData);\n\t  \t});\n\t  }, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"title\">\n\t\t\t\t<h1>The New York Times Coronavirus Map Recreation</h1>\n\t\t\t\t<p>By Vanessa Liang&nbsp;&nbsp;&nbsp;&nbsp;<span>Updated {todayDate}</span></p>\n\t\t\t</div>\n\t\t\t<div className=\"btn-group\">\n\t    \t\t<button\n\t    \t\t\tautoFocus\n\t    \t\t\tonClick={() =>  setView(\"case\")}>\n    \t\t\tTotal cases</button>\n\t    \t\t<button\n\t    \t\t\tonClick={() =>  setView(\"deaths\")}>\n\t    \t\tDeaths</button>\n\t    \t\t<button\n\t    \t\t\tonClick={ () =>  setView(\"percapita\")}>\n\t    \t\tPer capita</button>\n\t    \t</div>\n\t    \t<div className=\"description\">\n\t    \t\t<p>Hover map for more details</p>\n\t    \t</div>\n\t    \t<div className=\"map-group\">\n\t    \t{\n\t    \t\tview === \"case\" ? <CaseMap setTooltipContent={setContent} data={caseData}/>\n\t\t\t\t    :\n\t\t\t\tview === \"deaths\" ? <DeathMap setTooltipContent={setContent} data={deathData}/>\n\t\t\t\t    :\n\t\t\t\tview === \"percapita\" ? <PerCapitaMap setTooltipContent={setContent} data={caseData}/>\n\t\t\t\t  \t: null\n\t\t\t}\n\t\t\t\t<ReactTooltip className=\"data-tip\"\n\t\t\t\t\tborderColor=\"lightgrey\"\n\t\t\t\t\tbackgroundColor=\"white\"\n\t\t\t\t\ttextColor=\"black\"\n\t\t\t\t>\n\t\t\t\t\t{content}\n\t\t\t\t</ReactTooltip>\n\t\t\t</div>\n\t    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}